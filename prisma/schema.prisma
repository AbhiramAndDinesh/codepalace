datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  problems      JSolvedUsers[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model JSolvedUsers {
  user_id    String
  problem_id Int

  problem Problem @relation(fields: [problem_id], references: [problem_id], onDelete: Cascade)
  user    User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([user_id, problem_id])
}

model Problem {
  problem_id   Int            @id @default(autoincrement())
  title        String         @unique
  statement    String
  difficulty   String
  tags         JunctionTags[]
  users_solved JSolvedUsers[]
  testcases    Testcase[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Testcase {
  problem_id      Int
  stdin           String
  expected_output String
  problem         Problem @relation(fields: [problem_id], references: [problem_id], onDelete: Cascade)

  @@id([problem_id, stdin])
}

model Tag {
  tag_id   Int            @id @default(autoincrement())
  name     String         @unique
  problems JunctionTags[]
}

model JunctionTags {
  problem    Problem @relation(fields: [problem_id], references: [problem_id], onDelete: Cascade)
  problem_id Int
  tag        Tag     @relation(fields: [tag_id], references: [tag_id], onDelete: Cascade)
  tag_id     Int

  @@id([problem_id, tag_id])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
